/**********************************************************************************************************
 *
 * Module: Application
 *
 * File Name: APP.h
 *
 * Description: Header file contain the prototype of any task or function used in the application
 *
 * Author: Mario kaldas
 *
 **********************************************************************************************************/

#ifndef APP_APP_H_
#define APP_APP_H_


/****************************************************************************
 *                                  Includes
 * ************************************************************************/

/* FreeRTOS includes */

#include"FreeRTOS.h"
#include"task.h"
#include"semphr.h"
#include"queue.h"


/* Application includes */

#include"HAL/LED.h"
#include"HAL/pushbutton.h"
#include"HAL/Temperature_sensor.h"

/* other includes */

#include"MCAL/UART0.h"
#include"MCAL/GPTM.h"

/***************************************************************************
 *                                Definitions
 *************************************************************************** */

#define QUEUE_CURRENT_TEMP_SIZE     5u
#define QUEUE_DESIRED_TEMP_SIZE     5u
#define QUEUE_HEATING_LEVEL_SIZE    5u

typedef struct{

    /* If instance = 0 then it's driver, if instance = 1 then it's passenger  */
    uint8 instance;

    const uint8* name;
}info;

/****************************************************************************
 *                              Global variables
 * ************************************************************************/

extern SemaphoreHandle_t TEMP_mutex;
extern QueueHandle_t     desiredTemp;
extern QueueHandle_t     currentTemp;
extern QueueSetHandle_t  temperatureSet;
extern QueueHandle_t     heatingLevel;

extern info driver;
extern info passenger;

/****************************************************************************
 *                              Hooks prototype
 * ************************************************************************/

void vApplicationStackOverflowHook( TaskHandle_t xTask,char *pcTaskName );
void vApplicationMallocFailedHook( void );

/****************************************************************************
 *                             Functions prototype
 * ************************************************************************/
void vSetupHardware( void );

/****************************************************************************
 *                               Tasks prototype
 * ************************************************************************/

void vTemperatureMonitoringTask( void * pvParameters );
void vButtonMonitoringTask( void * pvParameters );
void vHeatingLevelMonitoringTask( void * pvParameters );
void vHeaterHandlerTask( void * pvParameters );
void vTemperatureSensorFailureTask( void * pvParameters );





#endif /* APP_APP_H_ */
